Class: Programming Languages
Name: William Horn
Date: Jan 24, 2018

Regular Languages:
    Converting Between Formats:
        DFA -> Regular Grammar -> Regular Expression -> DFA

Regular Expressions:
    Peices:
        - A* (0 or more a's)
        - AB (A and B)
        - A|B (A or B)

    Presedence:
        - from top to bottom

    Practice:
        Exersize 1:
            Lang: {y, xy, xxy ..., z, xz, xxz, ...}
            RegEx: x*(y|z)

        Exersize 2:
                 +-+
            S -> x + -> y
                 |
                 z

Context Free:
    Context Free Grammar (CFG):
        - every production has a single nonterminal on the left hand side.
        Example:
            S -> aSa
            S -> b
        Paran Matching:
            S -> SS
            S -> (S)
            S -> e

    Context Free Languages:
        - language generated by a context free grammar.

    Syntax Shortcut:
        S -> aSa | b === S -> aSa, S -> b
                * or *
        S -> aSa |
              b

Concrete Syntax Tree (CST):
    Intro:
        S -> S+S | n

    Parse Tree:
        root: start symbol

                 S
               / | \
              S  +  S
            / | \   |
            S + S   n
            |   |
            n   n

        Note: Derivation is leaves with terminals (n+n+n)

Ambiguity:
    - grammar that can have 2 parse trees (derivations) for the same tree.

      S -> S+S | n // Ambiguous
      S -> S+n | n // Unambiguous

    Notes:
        - property of grammars, not languages
        - ambiguous grammars can often be written unambiguously
        - there are inherently unambiguously languages.
        - There can be multiple derivations that have the same parse tree.

    Derivation Types:
        - leftmost derivations
            ll parsers: l to l, gen leftmost derivations
        - rightmost derivations
            lr parsers: l to r, gen rightmost derivations
        - neither


