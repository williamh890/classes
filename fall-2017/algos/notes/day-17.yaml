Class: Data Structures and Algorithms 
Name: William Horn
Date: Oct 23, 2017

Exception Safetly:
    - if signal cilent with error
        - are leakes avoided.
        - is data in a usable state.
    
    Guarantee's:
        Basic Guarantee:
            - Data remains in usable state and no leaked resources
              even if exception

        Strong Guarentee:
            - Either completes its job or makes no changes

        No-Throw:
            - will never throw an error

    Writing Exception Safe Code:
        - Look at every place exception could happen
        - @ every place it could throw, make sure its caught and either
          handled internally or signals client code and adhears to guarantee.

        Modularity:
            - Break up function into small components.
            - makes checking for exception safe code easy.
            
            Single Responsibility Principle (SRP):
                - Every module has exactly one responsibility
            
            Rule:
                - None const member func should not return an object by value.
        RAII:
            - Using raii makes code cleanup easy.

    noexcept:
        - mark a function that will not throw
        - code can check whether an expressionis declared as not throwing

        What funcs should be noexcept:
            - dtor
            - move ctor and move assignment op
            - any func that is called by a noexcept func that is outside a try block
            - any func you are sure it will never throw. (perminante property of a function)

        Can Also be used as an operator:
            if (noexcept(bar())) {...} // do this if bar never throws
        
        Can use both combined:
            void foo() noexcept( noexcept(bar()) ) { bar(); }


