Class: Data Structures and Algorithms 
Name: William Horn
Date: Sep 8, 2017 

Software Engineering Concepts:
    Don't Repeat Yourself (DRY):
        Every piece of knowledge must have a single location.

    Coupling:
        Loose: little dependence. Can modify one module wihtout breaking others
        Tight: Oposite of loose (called a brittle system).

    Single Responsibility Principle (SPR):
        Every class should have one, well definied, responsibility.

        Cohesive:
            everything in a class hangs together.

    Failure:
        - happens even in good software. 
        - tightly coupled code will fail multiple times.
        - Want failure to be caught early.

C++ Types:
    Builtin Integer Types:
        long, long long, unsigned int, unsigned short
        
        Suggestion: Only use int (from google)

    Better Types:
        - std::size_t
        - std::ptrdiff_t
        
        - std::int64_t
        - std::uint64_t
        - std::uint_fast64_f

        Note: 
            - These types can be changed from system. 
            - Also they hold symantic information.

        Container Member Types:
            size_type, value_type

    Floating Point Types:
        float, double, long double

        ALERT: Always use doubles!! (or long double)

Pointers and Stuff:
    int * p = &someInt;
    int valInSomeInt = *p;
