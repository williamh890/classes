Class: Data Structures and Algorithms 
Name: William Horn
Date: Oct 02, 2017

Algorithmic Efficiency (sorting):
    Efficiency:
        - use as few resources as possible.
          example:
              - executes fast.
              - time efficient

              - space efficient
              - uses little memory

        System Independent Method:
            - count basic operations.
            - how does input size effect efficientcy   

        Big O notation:
            notation:
                - A is order f(n) -> O(f(n))
                - A performs no more than k x f(n) basic ops
                - when n > n0 ( only when n is small )

            Example:
                - O(4n + 6) -> O(n) -> linear time

            note:
                - loops cannot be counted as basic operations.
                - most other things can.

        Scalable:
            - Something that still works with bigger problems
            - big-O can tell us this.

        fastest-slowest:
            O(1):
                - O(5) -> O(3.6) -> O(1)
                - Constant Time

            O(log_b(n)):
                - O of log base n
                - logrithmic time

            O(n):
                - very common
                - linear time

            O(nlog_b(n)):
                - log-lnear time === linearithmic time
                - slow as can be an still be scalable.
                - also common

            O(n^2):
                - grow too fast.
                - quadratic time.

            O(c^n):
                - exponential time
                - way too slow.

            note:
                5 is O(n) but we only care that its acutally O(1)

        Serious Loops:
            - executed n times
            - executed by some number that eventual gets to n

        Loop with fixed number of operations:
            - these can be counted as one operation.

Sorting:
    - rearrange things in order.

    key: 
        - thing that is used to sort.

    A sort:
        - comparision sort
        - needs some comparision func
        - general purpose comparision sort.
            - no restraints on list size and data type.

        stability:
            - don't needlessly rearange data

        in-place:
            - no large additional storage space required.

    Bubble Sort:
        - really be in all cases.
