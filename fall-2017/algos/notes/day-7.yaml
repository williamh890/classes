Class: Data Structures and Algorithms
Name: William Horn
Date: Sep 12, 2017 

Invisible Functions II:
    Resources:
        - acquire a resources
        - the responsible for releasing it (in not reasource leak)

        Own: responsible for releasing
        RAII: destructor releases object (an object owns)

Templates:
    - generic programming.

    Type Requirements:
        - done with comments befor the template function/class

Containers and Iterator:
    Containers:
        - data structure that holds multiple items
        - usually all of the same type

        Generic: container that can hold any type

        Access:
            - types of interfaces to containers

            Random: data can be dealt with in any order
            Sequential: data can only be dealt with efficently in order
                - two way: forward or backward
                - one way: only jump forward

        Problems with array:
            - not first class
            - types that have no member functions at all (not first class)
            - cannot be passed around to functions/copied
            - poor middle insertion performance

    Iterators:
        Loops:
            - counter
            - condition
            - iterator-controlled (for-each)

        Def: references an item in a container but does not own.
        Ranges: 1st iterator points a beginning, 2nd points just past the end.

        Directional:
            - forward (linked list)
            - bidirectional (doubly linked list)
            - random access (vector)

STL Algos to Know:
    - copy
    - equal
    - sort
