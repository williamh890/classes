Class:
   Data structures and Algorithms 
Name:
    William Horn
Date:
    Aug 28, 2017

Course Goals:
    -writing/documenting high quality code.
    -Proper error handling (rebust reliable applications)
    -Algorithmic efficency (big-O notation)
  
Structure of a Package:
    package: docs, cod, makefiles and data 
        Class Requirment:
            API documentation as comments in code.
    
    module:
        smaller grouping of code.

        Note:
            a package may consist of many modules.
    
        Module Flow:
            client -> interface -> implimentation

C++ Review:
    Type:
        value something can take.

        Examples: 
            3 -> int, 3. -> double, 3.f -> float

        Conversions:
            Implicite:
                value converted behind the scenes

                example:
                    int n = 7; double d = n;

            Explicit:
                example: (double)n
                         static_cast<double>(n)

        Making Types:
            Class or Struct:
                class Foo; struct Foo;
            typedef:
                typedef Foo FooArrTen[10]
            enum:
                Gender {male=1, female}
            using:
                using FooArrTen = Foo[10]
            enum class:
                enum class Gender {male, female}

    Identifiers:

        Name of something
        
        Declaration: prototypes
        Definition: implimentation (or whats in the {})

    File Conventions:
        source file: .cpp
        header file: .h or .hpp
















