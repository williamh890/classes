Class: Data Mining
Name: William Horn
Date: Sep 5, 2017

Concept Description:
    Requirements:
        - intelligible -> understood, discussed, disputed
        - operation -> can be applied to actual examples
    Discovery Types:
        Concepts:
            Classification -> (groups already known) prediction
            Clustering -> (finding categories for the data) outliers
            Association -> finding dependencies among values

        Examples:
            Classification problems: weather, contact lenses, iris, labor contracts
                note: Generally though to be mutually exclusive, but more complicated data
                      may be classified multiple ways

Supervised Learning:
    Classification learning is supervised with a training set

    Train:
        structure is derived examining example set where classification is known.

    Test:
        Apply to another data set  with known classification and check results.

Association Rules:
    Number of rules may approach n(n-1)/2 for n attributes

    Note: best algorithms allow quick eliminating as many of these as quickly possible.

    Support for association rules:
        assoc rule X = (x1, x2,...xi) -> y be a data set with m instances
        if left hand side known, right hand side can be predicted.

        Def:
            X -> Y is the count of the number of instances where the combination of x values, X, occurs in the data set, divided by m.

        Summary:
            Note the association rule interesting if it occurs frequently enough

    Confidence:
        Def:
            The count of the number of occurrences in the data set where this relationship holds true divided
            by the number of occurrences of the left hand set of values, X, overall

        Summary:
            How often the prediction is true.
            or the association rule is more interesting if X does determine y

        Note: Accuracy is used to define this in the book.

    Clustering:
        Problems:
            Is it possible to determine the cluster from a mass of data?
            Is it possible to classify future instances?

            Note:
                - Most algorithms take the number of groups that it needs to find.
                - This is a parameter that can be tweaked by the user.

                - For better or worse it will find that many groups.

            Outliers:
                instances that do not fit into a classification.

Numerical Prediction:
    Variation of classification:
        given n attribute values, determining the (n+1)st attribute value.

Examples:
    What is the form that a dataset must be in to mine

    Should be tabular:
        Data form: Instances with attributes.

        Note: don't always follow db rules when putting into tabular form

    Problem:
        not all data is naturally tabular...

        Question: How to convert such data to tabular form?

    Denormalization:
        Relational databases must be merged into one table for data mining algorithm to work.

    Note:
        Not just about trying to find info about the yes cases. Its also going to know
        something about the 'no' cases, which is just as important.

    Recursive Relationships:
        along with sibling relations, want to find full lineage. This can be done recursively.

        Note: made to find pairs, instead of full chains.

        One-to-many Relationships:
            Result in parent-key -> foreign key relationship

        Example:
            The time-series-granules table. Straight list of granules, with each
            granule having its associated job_id.

        Concept: like mother child relationship

        summary:
            data sets have to sometimes be manipulated to run data mining algorithms on.

Attribute:
    Design and Normalization:
        Example: ships and trucks
        two kinds of the same thing, but may not share all attributes.
        Example:
            how many wheels does the ship have? (null)

        Note: lots of attributes will be null

        Dependent Fields:
            married? T/F -> spouse's name
            point: spouse's name doesn't make sense if married is false.

        Data Types:
            numeric vs. non-numeric

            Spectrum:
                Nominal = unordered, unmeasurable named categories
                Example:
                    sunny, overcast, rainy

            Ordinal:
                ordered named categories.
                Example:
                    hot -> mild -> cool
            Interval:
                supports subtraction between values.
                Example: time expressed in years.
            Ratio:
                all operations make sense. with a natural 0 point.
                Example: physical distance.

            Note:
                Principle:
                    data mining has to handle all possible types of data,
                practice:
                    numeric or non-numeric

Weka:
    input format:
        ARFF = attribute relation file format.
