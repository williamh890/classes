Class: Computer Graphics 
Name: William Horn
Date: Nov 01, 2017

BlinPhong Model:
    Ambient:
        - normal vector ignored, just apply to fragment
    Diffuse:
        - Lambertion 
    Specular:
        - Reflection of the light on the object

    Method:
        - normal vec
        - light pointing at light source
        - pointing at camera
        - halfway between camera and 

Two Sided Polygons:
    - front facing, back facing

    Culling:
        - throw out front/back facing polygons

    gl_FrontFacing:
        - in frag shader to determine if polygon is front facing
        method:
            - flip surface normal if not front facing for two sided lighting

Fancy Lighting:
    - spotlights and lighting attenuation

    Spotlight:
        - light that shines in a particular direction

        To Make:
            Spot Direction: 
                - the primary direction the light shines in.
            Cutoff angle:
                - how far off the light shines from the primary direction. 
            Regular Light Stuff:
                - color, brightness, ...

        Make light look good:
            two cutoff angles:
                - one for full illumination
                - one for half illumination
                - outside is unlit.

                Note: inner and outer can be close together.

            Spot Exponent:
                - no cutoff angle.
                - theta = angle between direction and light. Brightness = cos(theta)^exponent.
                
            Note: Calculations are usually done in frag shader.

    Attenuation:
        - the farther from a light source you are, the dimmer it gets.

        Quadratic Attenuation:
            - disttolight = distance(surfpt, lightPos); 
            - color = paintClr / disttolight / disttolight

            Issue:
                - dynamic range is smaller than real world
                - attenuated colors are often dim.

        Linear Attenuation:
            - just divide by distance once.

            Note:
                - physically incorrect.
                - but it looks good, so its okay.

Writing Spotlight Code:
    Where:
        inside lighting function or outside:
            - inside, so as to still get ambient light outside of spotlight


Textures:
    - An image that can be painted onto a polygon

    Image: 
        - 2D Array of colors

    Texture:
        - the image to be painted on the polygon        
        - polygon gets overlaid on the image (texture) 
        Texel: a pixel in a texture.

        Heightmap:
            - instead of colors, altitudes are used.
            - can be used to make objects bumpy.

            Note: to start, well just use images with colors

        Map: the data set (texture map)
        Mapping: Technique 
            Texture Mapping: technique of painting a texture on the polygon.
            
        Texture Coordinates:
            - coordinates on the image (texture)
            - vertex attribute

        Texture Transformation:
            - transform texture coords into coords on the primitives.
            - texture => object coords

    Texture Channels:
        - how you sent the texture to the graphics card.
        - allows for resolution independent lookup.

    Texture Parameters:
        Mipmap: multiple resolutions for one texture.

code:
    activeTexture: sets texture channel
    bindTexture: creates a alias for tex object
    make dummy image
    textImage2D: makes image into a texture
